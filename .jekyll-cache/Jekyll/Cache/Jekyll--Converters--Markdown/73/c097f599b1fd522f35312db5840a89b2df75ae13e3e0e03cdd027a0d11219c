I"†$<p>The following code used to trigger <strong>ANR</strong> (Android Not Responding) error</p>

<p><em>Listing 1. A time consuming task.</em></p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>

  <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
    <span class="nf">setContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>

    <span class="n">button</span><span class="p">.</span><span class="nf">setOnClickListener</span> <span class="p">{</span>
      <span class="nf">killSomeTime</span><span class="p">()</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">private</span> <span class="k">fun</span> <span class="nf">killSomeTime</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1</span><span class="o">..</span><span class="m">20</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">i</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span>
      <span class="nf">println</span><span class="p">(</span><span class="s">"i:$i"</span><span class="p">)</span>
      <span class="nc">Thread</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="m">2000</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>But now, it doesn‚Äôt anymore. It‚Äôs still silly and sluggish though, but it won‚Äôt draw out the ANR error. Starting with Android 4.1 (Jelly Bean), Google introduced ‚ÄúProject Butter‚Äù. Instead of throwing ANR, it will drop the framerates instead. An app, at Project Butter‚Äôs baseline, is supposed to run at 60FPS. If you try ‚Äúto do too much work on the main thread‚Äù, the runtime will start dropping framerates.</p>

<p>The sample code above won‚Äôt draw out an ANR error, but if you run it, you will notice the following;</p>

<ol>
  <li>You expect that the TextView will refresh every 2 seconds to show the current value of i. It won‚Äôt. The frames are gonna drop, so you won‚Äôt see any UI activity</li>
  <li>But you will see the the value of i as it gets updated every 2 seconds in the Logcat window. This is because println isn‚Äôt using the UI Thread, so it‚Äôs not affected by the dropped frames</li>
  <li>You might see a message like this from the runtime‚Äôs Choreographer
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>07-31 15:51:29.646 13403-13403/net.workingdev.ch15scratchasynctask
I/Choreographer: Skipped 2402 frames!  The application may be doing too 
much work on its main thread
</code></pre></div>    </div>
  </li>
</ol>

<p>The <strong>killSomeTime</strong> function in Listing 1 is representative of of programming task that can slow down the UI‚Äâ‚Äî‚Äâjank. Generally, these are things like the following</p>

<ol>
  <li>Reading something from the network e.g. downloading an Image, downloading a web page etc.</li>
  <li>Reading a large file from storage</li>
  <li>Any sort of complex calculation</li>
</ol>

<p>To avoid jank, make sure you don‚Äôt do any of these in the UI Thead. Do the janky things in a background thread. There‚Äôs plenty of ways to this in Android, one of them is to use the Thread class from Java. Listing 2 shows how do to do this.</p>

<p><em>Listing 2. Using Threads to avoid Jank. Annotated code listing.</em></p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">android.os.AsyncTask</span>
<span class="k">import</span> <span class="nn">android.support.v7.app.AppCompatActivity</span>
<span class="k">import</span> <span class="nn">android.os.Bundle</span>
<span class="k">import</span> <span class="nn">kotlinx.android.synthetic.main.activity_main.*</span>

<span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>

  <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
    <span class="nf">setContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>

    <span class="n">button</span><span class="p">.</span><span class="nf">setOnClickListener</span> <span class="p">{</span>
      <span class="nc">Thread</span><span class="p">(</span><span class="nc">Runnable</span> <span class="p">{</span>                <span class="c1">// (1)</span>
        <span class="nf">killSomeTime</span><span class="p">()</span>                 <span class="c1">// (2)</span>
      <span class="p">}).</span><span class="nf">start</span><span class="p">()</span>                       <span class="c1">// (3)</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">private</span> <span class="k">fun</span> <span class="nf">killSomeTime</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1</span><span class="o">..</span><span class="m">20</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">runOnUiThread</span><span class="p">(</span><span class="nc">Runnable</span><span class="p">{</span>          <span class="c1">// (4)</span>
        <span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">i</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span>
      <span class="p">})</span>
      <span class="nf">println</span><span class="p">(</span><span class="s">"i:$i"</span><span class="p">)</span>
      <span class="nc">Thread</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="m">2000</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>(1)</strong> To create a background thread, you need to create an instance of Runnable type (Thread) and start it. The Thread constructor takes a Runnable type and executes whatever is inside the run method. I used an object expression in this line to create an instance of a Runnable type without creating a named subclass‚Äâ‚Äî‚Äâkinda like Java‚Äôs anonymous classes</p>

<p><strong>(2)</strong> We are inside the Runnable‚Äôs run method now. The Runnable type is a SAM type (single abstract method), so you don‚Äôt have to write the run method explicitly, but we are inside it. Now we‚Äôre no longer in the UI thread, we‚Äôre in a background thread</p>

<p><strong>(3)</strong> Don‚Äôt forget to call start on the Thread object</p>

<p><strong>(4)</strong> One of the limitations of a background thread is that it cannot do anything that modifies the UI. Any UI modification code has to run from the original thread that created the UI‚Äâ‚Äî‚Äâwhich is the UI Thread. If you need to change the UI from a background thread (like this) you can call the runOnUiThread method of the Activity class. It takes a Runnable type (again), you can put all the UI modification code on the run method of this Runnable type</p>

<!-- <p>
  This article is excerpted from the book <a target="" href="https://www.apress.com/gp/book/9781484239063">Learn Android Studio 3 with Kotlin</a>
</p>
<img src="/images/book_las3_kotlin.png" alt="Learn Android Studio 3 with Kotlin"> -->

<div class="card" style="width: 20rem;">
  <img src="/images/book_las3_kotlin.png" class="card-img-top" alt="Learn Android Studio 3 with Kotlin" />
  <div class="card-body">
    <h5 class="card-title">Learn Android Studio 3 with Kotlin</h5>
    <p class="card-text">Learn more. See more code samples like this</p>
    <a target="_blank" href="https://www.apress.com/gp/book/9781484239063" class="btn btn-primary">
      Get the book</a>
  </div>
</div>
:ET