I"<p>The Snackbar is a view that‚Äôs mostly used to give quick feedback to the user, like Toast. It appears at the bottom of the the screen and disappears after some timeout. Sometimes the user can ‚Äúswipe‚Äù the Snackbar to make it disappear. But unlike Toast, you can put some actions in the Snackbar.</p>

<p><img src="/images/android-snackbar-with-action-callback-undo.png" alt="" /></p>

<p><strong>Figure 1. Snackbar example</strong></p>

<p>Checklist before using Snackbar in your project</p>

<ol>
  <li>Update the build.gradle file to include ‚Äòcom.android.support:design‚Äô in the dependencies. Without this, you won‚Äôt be able to use the Snackbar control. In an Android Studio project, there are 2 gradle files. One is located on the project‚Äôs root folder and the other is inside the app folder. It‚Äôs the latter that we need to update</li>
  <li>Add an android:id attribute to the layout container.You will refer to it later when you use Snackbar. The layout container doesn‚Äôt have a View ID by default, so you need to put it in</li>
  <li>Import the Kotlin Android Extensions (KAE) in your MainActivity file. This is actually optional, but it would be nice if we can refer to View Ids without using <code class="highlighter-rouge">findViewById()</code>. The KAE synthesizes all the View Ids in the layout files and exposes them as extension properties of the class
Listing 1. excerpt from app/build.gradle</li>
</ol>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dependencies {
  ...
  implementation "com.android.support:design:27.1.0"
}
</code></pre></div></div>

<p><strong>Listing 2. excerpt from MainActivity.Kt</strong></p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">kotlinx.android.synthetic.main_activity_main.*</span> 

<span class="k">fun</span> <span class="nf">whenClicked</span><span class="p">(</span><span class="n">v</span><span class="p">:</span><span class="nc">View</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">snack</span><span class="p">=</span><span class="nc">Snackbar</span><span class="p">.</span><span class="nf">make</span><span class="p">(</span><span class="n">root_layout</span><span class="p">,</span> <span class="s">"Hello"</span><span class="p">,</span> <span class="nc">Snackbar</span><span class="p">.</span><span class="nc">LENGTH_LONG</span><span class="p">)</span>
  <span class="n">snack</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>First line of Listing 2 imports the Kotlin Android Extension. This lets us refer to View elements using just their IDs.</p>

<p>Snackbar‚Äôs <strong>make()</strong> function takes 3 parameters, they are;</p>

<ol>
  <li>the View ID of the layout container, this is why you need to put an <code class="highlighter-rouge">android:id="root_layout"</code> in the container</li>
  <li>the String message you want to show, and</li>
  <li>the amount of time, in milliseconds, that the message will be visible</li>
</ol>

<!-- <p>
  This article is excerpted from the book <a target="" href="https://www.apress.com/gp/book/9781484239063">Learn Android Studio 3 with Kotlin</a>
</p>
<img src="/images/book_las3_kotlin.png" alt="Learn Android Studio 3 with Kotlin"> -->

<div class="card" style="width: 24rem;">
  <img src="/images/book_las3_kotlin.png" class="card-img-top" alt="Learn Android Studio 3 with Kotlin" />
  <div class="card-body">
    <h5 class="card-title">Learn Android Studio 3 with Kotlin</h5>
    <p class="card-text">Learn more. See more code samples like this</p>
    <a target="_blank" href="https://www.apress.com/gp/book/9781484239063" class="btn btn-primary">
      Get the book</a>
  </div>
</div>
:ET