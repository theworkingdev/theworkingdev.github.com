I"7)<p>Kotlin functions are defined using <code class="highlighter-rouge">fun</code> keyword, followed by the name of the function, a pair of parentheses, optional parameters, the return type of function and then the body of the function, which is pair of curly braces. It’s pretty much like a Java function, except that in Java,  we have no <code class="highlighter-rouge">fun</code> (pun intended) and the type of the function  is written to the left of the function (in Java), while in Kotlin, the return type of the function is to the right of function name.</p>

<p><strong>Contents</strong></p>
<ul id="markdown-toc">
  <li><a href="#general-usage" id="markdown-toc-general-usage">General usage</a></li>
  <li><a href="#default-function-arguments" id="markdown-toc-default-function-arguments">Default function arguments</a></li>
  <li><a href="#named-params" id="markdown-toc-named-params">Named params</a></li>
</ul>

<h2 id="general-usage">General usage</h2>

<p>When a function declares a return type, the type and the function’s name must be separated by a colon.  Like this function that takes in a Float argument and returns a Float value</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">inchesToCm</span><span class="p">(</span><span class="n">inches</span><span class="p">:</span><span class="nc">Float</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Float</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">inches</span> <span class="p">*</span> <span class="mf">2.54</span>
<span class="p">}</span> 

<span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span><span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="err">)</span> <span class="err">{</span>
  <span class="err">pr</span><span class="k">in</span><span class="err">tln(</span><span class="k">in</span><span class="err">ches</span><span class="nc">ToCm</span><span class="err">(10))</span>
<span class="err">}</span>
</code></pre></div></div>

<p>If a function has a single statement in it’s body (like the previous code sample), you can write it as an expression. Like this</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">inchesToCm</span><span class="p">(</span><span class="n">inches</span><span class="p">:</span><span class="nc">Float</span><span class="p">)</span> <span class="p">=</span> <span class="n">inches</span> <span class="p">*</span> <span class="mf">2.54</span>
</code></pre></div></div>

<p>In a function expression, you don’t have to write the return type because Kotlin can infer it from the RHS (right hand side of the assignment operator).</p>

<p>When a function (that isn’t written as an expression) doesn’t specify it’s return type, the compiler will assume that it returns the Unit type. Think of Unit as the equivalent of Java’s void, like this</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">talk</span><span class="p">()</span> <span class="p">{</span>       <span class="c1">// (1)</span>
  <span class="nf">println</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">)</span> <span class="c1">// (2)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/images/1.png" alt="" /> Our function doesn’t have a declared return type. Hence, it’s automatically Unit</p>

<p><img src="/images/2.png" alt="" /> The body of a function whose return type is Unit cannot have any return statement in it; just like void methods in Java</p>

<p>Functions can be written in 3 places; as a top-level (which you’ve seen already) inside classes (which you’ve also seen) and inside another function.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>                 <span class="c1">// (1)</span>
  <span class="k">fun</span> <span class="nf">baz</span><span class="p">()</span> <span class="p">:</span> <span class="nc">String</span><span class="p">{</span>       <span class="c1">// (2)</span>
    <span class="k">return</span> <span class="s">"Bar"</span>
  <span class="p">}</span>
  <span class="nf">println</span><span class="p">(</span><span class="s">"Foo ${baz()}"</span><span class="p">)</span> 	<span class="c1">// (3)</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span><span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
  <span class="nf">foo</span><span class="p">()</span>
  <span class="nf">baz</span><span class="p">()</span>	<span class="c1">// (4)</span>
  <span class="nf">println</span><span class="p">(</span><span class="s">"${Person(lastname="</span><span class="nc">Doe</span><span class="s">", firstname = "</span><span class="nc">John</span><span class="s">").fullname()}"</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Person</span><span class="p">(</span><span class="kd">val</span> <span class="py">firstname</span><span class="p">:</span><span class="nc">String</span><span class="p">,</span> <span class="kd">val</span> <span class="py">lastname</span><span class="p">:</span><span class="nc">String</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">fun</span> <span class="nf">fullname</span><span class="p">()</span> <span class="p">=</span> <span class="s">"$firstname $lastname"</span>  <span class="c1">// (5)</span>
</code></pre></div></div>

<p><img src="/images/1.png" alt="" />  <code class="highlighter-rouge">foo()</code> is a top level function. It isn’t nested in a class or another function</p>

<p><img src="/images/2.png" alt="" />  <code class="highlighter-rouge">bazz()</code> is nested inside function <code class="highlighter-rouge">foo()</code>. Which means, baz is scoped with foo; which means, it can only be called within the body of <code class="highlighter-rouge">foo()</code></p>

<p><img src="/images/3.png" alt="" />  This call is ok, <code class="highlighter-rouge">baz()</code> is callable within <code class="highlighter-rouge">foo()</code></p>

<p><img src="/images/4.png" alt="" />  Not OK. This call will fail,  <code class="highlighter-rouge">baz()</code> is not callable from <code class="highlighter-rouge">main()</code> , you can only call <code class="highlighter-rouge">baz()</code> from within <code class="highlighter-rouge">foo()</code></p>

<p><img src="/images/5.png" alt="" />  Like Java, you can put functions inside a class</p>

<h2 id="default-function-arguments">Default function arguments</h2>

<p>You can assign default values to function parameters, like this</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">connectToDb</span><span class="p">(</span><span class="n">hostname</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">"localhost"</span><span class="p">,</span>
                <span class="n">username</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">"mysql"</span><span class="p">,</span>
                <span class="n">password</span><span class="p">:</span><span class="nc">String</span> <span class="p">=</span> <span class="s">"secret"</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>

<p>And because there are default parameters, you can call this function without passing any arguments. Like this</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">connectToDb</span><span class="p">()</span>
</code></pre></div></div>

<p>Or you can pass only two arguments, like this</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">connectToDb</span><span class="p">(</span><span class="s">"mycomputer"</span><span class="p">,</span> <span class="s">"ted"</span><span class="p">)</span>
</code></pre></div></div>

<p>“mycomputer” is the hostname, “ted” is the username. The two arguments that we passed corresponds to the first two parameters that were defined in the function.</p>

<h2 id="named-params">Named params</h2>

<p>In addition to default function arguments, we can also call the function by naming the arguments at the callsite.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span><span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
  <span class="nf">connectToDb</span><span class="p">(</span><span class="n">hostname</span><span class="p">=</span><span class="s">"neptune"</span><span class="p">,</span>
              <span class="n">username</span><span class="p">=</span><span class="s">"saturn"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the example above, we only passed two arguments, but since our function has default parameters, that’s okay.</p>

<!-- <p>
  This article is excerpted from the book <a target="" href="https://www.apress.com/gp/book/9781484239063">Learn Android Studio 3 with Kotlin</a>
</p>
<img src="/images/book_las3_kotlin.png" alt="Learn Android Studio 3 with Kotlin"> -->

<div class="card" style="width: 22rem;">
  <img src="/images/book_las3_kotlin.png" class="card-img-top" alt="Learn Android Studio 3 with Kotlin" />
  <div class="card-body">
    <h5 class="card-title">Learn Android Studio 3 with Kotlin</h5>
    <p class="card-text">Learn more. See more code samples like this</p>
    <a target="_blank" href="https://www.apress.com/gp/book/9781484239063" class="btn btn-primary">
      Get the book</a>
  </div>
</div>
:ET