I"Y@<p>Kotlin doesn’t have a <em>switch</em> statement, but it has the <em>when</em> construct. It looks a lot like the <em>switch</em> but it packs a lot more punch. In its simplest form, it can be implemented like this</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">d</span> <span class="p">=</span> <span class="nc">Date</span><span class="p">()</span>
 <span class="kd">val</span> <span class="py">c</span> <span class="p">=</span> <span class="nc">Calendar</span><span class="p">.</span><span class="nf">getInstance</span><span class="p">()</span>
 <span class="kd">val</span> <span class="py">day</span> <span class="p">=</span> <span class="n">c</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="nc">Calendar</span><span class="p">.</span><span class="nc">DAY_OF_WEEK</span><span class="p">)</span>

 <span class="k">when</span> <span class="p">(</span><span class="n">day</span><span class="p">)</span> <span class="p">{</span>
   <span class="m">1</span> <span class="p">-&gt;</span> <span class="nf">println</span><span class="p">(</span><span class="s">"Sunday"</span><span class="p">)</span>
   <span class="m">2</span> <span class="p">-&gt;</span> <span class="nf">println</span><span class="p">(</span><span class="s">"Monday"</span><span class="p">)</span>
   <span class="m">3</span> <span class="p">-&gt;</span> <span class="nf">println</span><span class="p">(</span><span class="s">"Tuesday"</span><span class="p">)</span>
   <span class="m">4</span> <span class="p">-&gt;</span> <span class="nf">println</span><span class="p">(</span><span class="s">"Wednesday"</span><span class="p">)</span>
 <span class="p">}</span>
</code></pre></div></div>

<p>The idea is to match the argument (the variable <code class="highlighter-rouge">day</code>) against the branches <code class="highlighter-rouge">1</code>, <code class="highlighter-rouge">2</code>, <code class="highlighter-rouge">3</code> or <code class="highlighter-rouge">4</code> . The test is carried out from top to bottom (1, then 2, then 3 then 4) and when a match is made the statement (or block) to right of the thin arrow <code class="highlighter-rouge">-&gt;</code> is executed. Unlike in <em>switch</em> statements, when a match is found, it doesn’t flow through or cascade to the next branch, so, you don’t need to put a <em>break</em> statement.</p>

<p>The <em>when</em> construct can also be used as an expression, and when it’s used as such, each branch becomes the returned value of the expression. See the code example below.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">d</span> <span class="p">=</span> <span class="nc">Date</span><span class="p">()</span>
 <span class="kd">val</span> <span class="py">c</span> <span class="p">=</span> <span class="nc">Calendar</span><span class="p">.</span><span class="nf">getInstance</span><span class="p">()</span>
 <span class="kd">val</span> <span class="py">day</span> <span class="p">=</span> <span class="n">c</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="nc">Calendar</span><span class="p">.</span><span class="nc">DAY_OF_WEEK</span><span class="p">)</span>

<span class="kd">var</span> <span class="py">dayOfweek</span> <span class="p">=</span> <span class="k">when</span> <span class="p">(</span><span class="n">day</span><span class="p">)</span> <span class="p">{</span>
   <span class="m">1</span> <span class="p">-&gt;</span> <span class="s">"Sunday"</span>
   <span class="m">2</span> <span class="p">-&gt;</span> <span class="s">"Monday"</span>
   <span class="m">3</span> <span class="p">-&gt;</span> <span class="s">"Tuesday"</span>
   <span class="m">4</span> <span class="p">-&gt;</span> <span class="s">"Wednesday"</span>
   <span class="k">else</span> <span class="p">-&gt;</span> <span class="s">"Unknown"</span>
 <span class="p">}</span> 
</code></pre></div></div>

<p>Just remember to include the <em>else</em> clause if you use it as an expression. The compiler thoroughly checks all possible pathways and it needs to be exhaustive, which is why the <em>else</em> clause becomes a requirement.</p>

<p>You’re not limited to numeric literals, you can use a wide variety of types for the branches, like this code below.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    
  <span class="nf">print</span><span class="p">(</span><span class="s">"What is the answer to life? "</span><span class="p">)</span>
  
  <span class="kd">var</span> <span class="py">response</span><span class="p">:</span><span class="nc">Int</span><span class="p">?</span> <span class="p">=</span> <span class="nf">readLine</span><span class="p">()</span><span class="o">?.</span><span class="nf">toInt</span><span class="p">()</span>  <span class="c1">// (1)                                                 </span>
  <span class="kd">val</span> <span class="py">message</span> <span class="p">=</span> <span class="k">when</span><span class="p">(</span><span class="n">response</span><span class="p">){</span>
    <span class="m">42</span> <span class="p">-&gt;</span> <span class="s">"So long, and thanks for the all fish"</span>
    <span class="m">43</span><span class="p">,</span> <span class="m">44</span><span class="p">,</span> <span class="m">45</span> <span class="p">-&gt;</span> <span class="s">"either 43,44 or 45"</span> <span class="c1">// (2)   </span>
    <span class="k">in</span> <span class="m">46</span> <span class="o">..</span> <span class="m">100</span> <span class="p">-&gt;</span>  <span class="s">"forty six to one hundred"</span> <span class="c1">// (3)    </span>
    <span class="k">else</span> <span class="p">-&gt;</span> <span class="s">"Not what I'm looking for"</span> <span class="c1">// (4)   </span>
  <span class="p">}</span>
  <span class="nf">println</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>(1)</strong> <code class="highlighter-rouge">readLine()</code> reads an input from the console. Don’t worry about the questions marks for now, we’ll get to that in the coming sections</p>

<p><strong>(2)</strong> The branch conditions may be combined with a comma</p>

<p><strong>(3)</strong> We can check if it’s a member of a range or a collection</p>

<p><strong>(4)</strong> The else clause is required when when is used as an expression</p>

<p>You can also use <em>when</em> without an argument, like this</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">a</span> <span class="p">=</span> <span class="m">3</span>
<span class="kd">val</span> <span class="py">b</span> <span class="p">=</span> <span class="m">2</span>
<span class="kd">val</span> <span class="py">c</span> <span class="p">=</span> <span class="m">1</span>
<span class="kd">val</span> <span class="py">str</span> <span class="p">=</span> <span class="s">"str"</span>

<span class="k">when</span> <span class="p">{</span>
  <span class="n">a</span> <span class="p">&gt;</span> <span class="n">b</span> <span class="p">-&gt;</span> <span class="nf">println</span><span class="p">(</span><span class="s">"a is greater than b"</span><span class="p">)</span>
  <span class="n">b</span> <span class="p">&gt;</span> <span class="n">c</span> <span class="p">-&gt;</span> <span class="nf">println</span><span class="p">(</span><span class="s">"b is greater than c"</span><span class="p">)</span>
  <span class="n">b</span> <span class="p">==</span> <span class="m">2</span> <span class="p">-&gt;</span> <span class="nf">println</span><span class="p">(</span><span class="s">"b is equal to 2"</span><span class="p">)</span>
  <span class="n">str</span> <span class="p">==</span> <span class="s">"str"</span> <span class="p">-&gt;</span> <span class="nf">println</span><span class="p">(</span><span class="s">"str is actually equal to $str"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Which effectively makes it the equivalent of an <em>if-elseif</em> structure; it looks much cleaner though. But hold on a minute, read the sample code above again, and this time, examine it closely. Have you noticed that all the conditions in all the branches should evaluate to true? They do. However, if you run code above, it will only print the first branch, <code class="highlighter-rouge">a &gt; b</code>. Like the <em>if-elseif</em>, when one branch evaluates to true, the rest of the succeeding branches are ignored. They will no longer be evaluated. Best to take note of that.</p>

<p>You can also use the <code class="highlighter-rouge">is</code> operator in a <em>when</em> construct. If you do that, you get the benefit of smart casts as well. See the following code for an example.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">when</span> <span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">is</span> <span class="nc">Int</span> <span class="p">-&gt;</span> <span class="nf">println</span><span class="p">(</span><span class="s">"The square of $arg is ${arg * arg}"</span><span class="p">)</span>
  <span class="k">is</span> <span class="nc">String</span> <span class="p">-&gt;</span> <span class="nf">println</span><span class="p">(</span><span class="s">"Hello"</span> <span class="p">+</span> <span class="n">arg</span><span class="p">)</span>
  <span class="k">is</span> <span class="nc">IntArray</span> <span class="p">-&gt;</span> <span class="nf">println</span><span class="p">(</span><span class="n">arg</span><span class="p">.</span><span class="nf">sum</span><span class="p">())</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Another (slightly more complicated) example of using the <code class="highlighter-rouge">is</code> operator in a <em>when</em> construction.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="p">&lt;</span><span class="nc">T</span><span class="p">&gt;</span> <span class="nf">fooBar</span><span class="p">(</span><span class="n">arg</span><span class="p">:</span><span class="nc">T</span><span class="p">)</span> <span class="p">:</span> <span class="nc">T</span> <span class="p">{</span>   
  <span class="kd">var</span> <span class="py">retval</span><span class="p">:</span><span class="nc">T</span> <span class="p">=</span> <span class="m">0</span> <span class="k">as</span> <span class="nc">T</span>
  <span class="k">when</span> <span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">is</span> <span class="nc">String</span> <span class="p">-&gt;</span> <span class="p">{</span>           
      <span class="n">retval</span> <span class="p">=</span> <span class="s">"Hello world"</span> <span class="k">as</span> <span class="nc">T</span>   
    <span class="p">}</span>
    <span class="k">is</span> <span class="nc">Number</span> <span class="p">-&gt;</span> <span class="p">{</span>
      <span class="n">retval</span> <span class="p">=</span> <span class="m">100</span> <span class="k">as</span> <span class="nc">T</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">retval</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here’s how you might use it in an Android app.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">val</span> <span class="py">Log</span> <span class="p">=</span> <span class="nc">Logger</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="nc">MainActivity</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>

  <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
    <span class="nf">setContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreateOptionsMenu</span><span class="p">(</span><span class="n">menu</span><span class="p">:</span> <span class="nc">Menu</span><span class="p">?):</span> <span class="nc">Boolean</span> <span class="p">{</span>
    <span class="nc">Log</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s">"onCreateOptionsMenu"</span><span class="p">)</span>
    <span class="n">menu</span><span class="o">?.</span><span class="nf">add</span><span class="p">(</span><span class="s">"File"</span><span class="p">)</span>
    <span class="n">menu</span><span class="o">?.</span><span class="nf">add</span><span class="p">(</span><span class="s">"Exit"</span><span class="p">)</span>
    <span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="nf">onCreateOptionsMenu</span><span class="p">(</span><span class="n">menu</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="k">override</span> <span class="k">fun</span> <span class="nf">onOptionsItemSelected</span><span class="p">(</span><span class="n">item</span><span class="p">:</span> <span class="nc">MenuItem</span><span class="p">?):</span> <span class="nc">Boolean</span> <span class="p">{</span>
    <span class="k">when</span> <span class="p">(</span><span class="n">item</span><span class="o">?.</span><span class="nf">toString</span><span class="p">())</span> <span class="p">{</span>
      <span class="s">"File"</span> <span class="p">-&gt;</span> <span class="p">{</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s">"LOG File menu"</span><span class="p">)</span>
      <span class="p">}</span>
      <span class="s">"Exit"</span> <span class="p">-&gt;</span> <span class="p">{</span>
        <span class="nc">Log</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s">"LOG Exit menu"</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<!-- <p>
  This article is excerpted from the book <a target="" href="https://www.apress.com/gp/book/9781484239063">Learn Android Studio 3 with Kotlin</a>
</p>
<img src="/images/book_las3_kotlin.png" alt="Learn Android Studio 3 with Kotlin"> -->

<div class="card" style="width: 20rem;">
  <img src="/images/book_las3_kotlin.png" class="card-img-top" alt="Learn Android Studio 3 with Kotlin" />
  <div class="card-body">
    <h5 class="card-title">Learn Android Studio 3 with Kotlin</h5>
    <p class="card-text">Learn more. See more code samples like this</p>
    <a target="_blank" href="https://www.apress.com/gp/book/9781484239063" class="btn btn-primary">
      Get the book</a>
  </div>
</div>
:ET