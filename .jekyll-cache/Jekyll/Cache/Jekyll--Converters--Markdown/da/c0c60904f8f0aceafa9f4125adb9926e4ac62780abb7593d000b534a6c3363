I"Ã <p>I wrote a series of post on how to handle background processing in an Android app. You don‚Äôt really need to read them before you dive into this post, but it will give you context and more background about jank and how we use Threads, Handlers and AsyncTask to avoid it. The three previous post about jank are the following.</p>

<ol>
  <li><a href="/2018/07/android-jank_31.html">Android Jank</a>. Running codes in the background using Java Threads</li>
  <li><a href="/2018/07/android-threads-handlers-and-messages.html">Android Threads, Handlers and Messages</a>. Doing background work using Handlers and Messages, unlike Threads, Handler‚Äôs and Messages are part of the Android Framework (not part of Java)</li>
  <li><a href="/2018/08/android-asynctask.html">Android AsyncTask</a>. Doing work in the background using the AsyncTask class. The AsyncTask, like Handlers and Messages, are also part of the Android Framework</li>
</ol>

<p>In this post, we‚Äôll take a look at another way to avoid jank. If you haven‚Äôt read the three previous post about jank, the following list summarizes what we‚Äôre trying to do.</p>

<p>What is jank?. When you try to do too much on the UI Thread, the Android runtime will start dropping frames. When your app‚Äôs FPS drops, the UI will stutter, it will be sluggish and annoying to use. This is jank
How do we avoid it?. Don‚Äôt try to do too much on UI Thread. Don‚Äôt;
Read from a large file, or write a large amount of info to a file
Connect to the network and read from it (or write)
Compute a complex routine Do these things in background thread
What is the UI Thread. It‚Äôs the original Thread that‚Äôs responsible for creating (and modifying) View elements in your app. Some developers refer to UI Thread as the ‚ÄúMain Thread‚Äù
What is a background thread. Any thread that isn‚Äôt the UI Thread. You generally create a background thread for your app</p>

<p>Now that you‚Äôre all caught up, let‚Äôs look at another way to run codes in the background. In this post, we will use the Anko library.</p>

<p>Anko is an Android library written in Kotlin by Jetbrains (the same company that created Kotlin). You can use for wide variety of task but for our purpose, we only need the doAsync portion. As it‚Äôs name implies, Anko‚Äôs doAsync will let us run codes asynchronously or in the background.</p>

<p>To start using Anko in a project, we need to add it‚Äôs dependency to the Gradle file.</p>

<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
  <span class="o">....</span>
  <span class="n">implementation</span> <span class="s1">'org.jetbrains.anko:anko-common:0.9'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The doAsync‚Äôs code structure is as follows</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">doAsync</span> <span class="p">{</span>
  <span class="c1">// do things in the background  1</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>(1)</strong> In here, you can read or write to large files, download a file from the internet or do a task that will take a long time to complete. This block will execute in a background thread</p>

<p>The next challenge is how to go back to the UI Thread. Remember that a background thread is not allowed to change anything in the UI. Anko‚Äôs approach is is probably the simplest of all the other options (Threads, Handlers or AsyncTask).</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">doAsync</span> <span class="p">{</span>
  <span class="c1">// do things in the background  // (1)</span>
  <span class="nf">activityUiThread</span> <span class="p">{</span>
    <span class="c1">// make changes to the UI     // (2)</span>
    <span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="s">"Hello"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>(1)</strong> Background processing
<strong>(2)</strong> Now, you‚Äôre back to the UI Thread. It‚Äôs that simple. Whenever you need to go back to the UI Thread, just do it inside the activityUiThread block
The following code example shows a complete listing of a sample Activity which uses Anko‚Äôs doAsync to perform a long computation and then write something back to the UI
MainActivity, annotated code.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nn">android.support.v7.app.AppCompatActivity</span>
<span class="k">import</span> <span class="nn">android.os.Bundle</span>
<span class="k">import</span> <span class="nn">kotlinx.android.synthetic.main.activity_main.*</span>
<span class="k">import</span> <span class="nn">org.jetbrains.anko.activityUiThread</span>
<span class="k">import</span> <span class="nn">org.jetbrains.anko.doAsync</span>

<span class="kd">class</span> <span class="nc">MainActivity</span> <span class="p">:</span> <span class="nc">AppCompatActivity</span><span class="p">()</span> <span class="p">{</span>

  <span class="k">override</span> <span class="k">fun</span> <span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">:</span> <span class="nc">Bundle</span><span class="p">?)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">.</span><span class="nf">onCreate</span><span class="p">(</span><span class="n">savedInstanceState</span><span class="p">)</span>
    <span class="nf">setContentView</span><span class="p">(</span><span class="nc">R</span><span class="p">.</span><span class="n">layout</span><span class="p">.</span><span class="n">activity_main</span><span class="p">)</span>

    <span class="n">button</span><span class="p">.</span><span class="nf">setOnClickListener</span> <span class="p">{</span>             <span class="c1">// (1)</span>
      <span class="nf">doAsync</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="k">in</span> <span class="m">1</span><span class="o">..</span><span class="m">15</span><span class="p">)</span> <span class="p">{</span>                   <span class="c1">// (2)</span>
          <span class="nc">Thread</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="m">2000</span><span class="p">)</span>                <span class="c1">// (3)</span>
          <span class="nf">activityUiThread</span> <span class="p">{</span>
            <span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="p">=</span> <span class="n">i</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span>    <span class="c1">// (4)</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>(1)</strong> Let‚Äôs setup a basic OnClickListener. This will trigger the background task</p>

<p><strong>(2)</strong> Let‚Äôs just count from 1 to 15</p>

<p><strong>(3)</strong> This simulates a long running task, our loop will come around 15 times, so the task will take a total of 30 seconds to complete</p>

<p><strong>(4)</strong> Let‚Äôs tell the user what‚Äôs going on with the app. Update the TextView object with the current value of i</p>

<!-- <p>
  This article is excerpted from the book <a target="" href="https://www.apress.com/gp/book/9781484239063">Learn Android Studio 3 with Kotlin</a>
</p>
<img src="/images/book_las3_kotlin.png" alt="Learn Android Studio 3 with Kotlin"> -->

<div class="card" style="width: 24rem;">
  <img src="/images/book_las3_kotlin.png" class="card-img-top" alt="Learn Android Studio 3 with Kotlin" />
  <div class="card-body">
    <h5 class="card-title">Learn Android Studio 3 with Kotlin</h5>
    <p class="card-text">Learn more. See more code samples like this</p>
    <a target="_blank" href="https://www.apress.com/gp/book/9781484239063" class="btn btn-primary">
      Get the book</a>
  </div>
</div>
:ET