I"Ï	<p>Kotlin has a while loop that looks and behaves exactly like the one in Java</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">arr</span> <span class="p">=</span> <span class="p">(</span><span class="m">1</span><span class="o">..</span><span class="m">100</span><span class="p">).</span><span class="nf">filter</span> <span class="p">{</span> <span class="n">it</span> <span class="p">%</span> <span class="m">2</span> <span class="p">==</span> <span class="m">0</span> <span class="p">}.</span><span class="nf">toTypedArray</span><span class="p">()</span>
<span class="kd">var</span> <span class="py">counter</span> <span class="p">=</span> <span class="m">0</span>
<span class="kd">var</span> <span class="py">sum</span> <span class="p">=</span> <span class="m">0</span>
<span class="k">while</span><span class="p">(</span><span class="n">counter</span> <span class="p">&lt;</span> <span class="n">arr</span><span class="p">.</span><span class="n">size</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">sum</span> <span class="p">+=</span> <span class="n">arr</span><span class="p">[</span><span class="n">counter</span><span class="p">++]</span>
<span class="p">}</span>
<span class="nf">println</span><span class="p">(</span><span class="s">"sum is $sum"</span><span class="p">)</span>
</code></pre></div></div>

<p>The code above, with the exception of the first line, should look very familiar to Java folks. Thatâ€™s exactly how Java would do a while loop. So, weâ€™ll leave it at that.</p>

<p>This is whatâ€™s going on in the first line;</p>

<ul>
  <li><code class="highlighter-rouge">(0..100)</code> - This creates a series of Ints from 1 to 100, using the range function in operator form</li>
  <li><code class="highlighter-rouge">filter {it % 2 == 0}</code> - Filter is an extension function (weâ€™ll come up on that in a little while). It does exactly what you think it does, it filters data. It works on objects that are a subtype Iterable. Whatâ€™s inside is a lambda expression thatâ€™s used to evaluate each item of the list. If the item satisfies the condition (is it an even number), then it will be included in the list</li>
  <li><code class="highlighter-rouge">toTypedArray()</code> - The filter function returns a list. For this example, I didnâ€™t want to work with Lists, I wanted to work with arrays instead, so, I converted it with this function</li>
</ul>

:ET